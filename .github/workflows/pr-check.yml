# This workflow validates the AWS CDK app whenever a pull request is opened to the master branch
name: PR Deployment Check

# Trigger this workflow for any pull request targeting the 'master' branch
on:
  pull_request:
    branches:
      - master

jobs:
  validate-cdk:
    name: Validate CDK App
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner provided by GitHub

    steps:
      # Step 1: Clone the repository onto the runner
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Python so we can install CDK dependencies (Python-based)
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'  # Use the latest available version in the 3.x series

      # Step 3: Set up Node.js (used by AWS CDK CLI)
      - name: Setup Node.js (for CDK CLI)
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'  # Updated to supported version per CDK warning

      # Step 4: Configure AWS credentials using secrets stored in the GitHub repository
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Access key for AWS authentication
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Secret key for AWS authentication
          aws-region: ap-south-1  # Target AWS region (India)

      # Step 5: Install the AWS CDK CLI globally via npm
      - name: Install AWS CDK CLI
        run: npm install -g aws-cdk

      # Step 6: Install CDK Python dependencies and your project's requirements
      - name: Install Python CDK and Dependencies
        run: |
          pip install aws-cdk-lib constructs  # Install core CDK libraries
          pip install -r requirements.txt     # Install additional dependencies from requirements file

      # Step 7: Bootstrap the CDK environment (sets up required resources like S3 buckets for deployment)
      - name: Bootstrap CDK Environment
        run: cdk bootstrap

      # Step 8: Generate a CloudFormation template from your CDK app (used for diffing and deploying)
      - name: Synthesize CDK App
        run: cdk synth

      # Step 9: List contents of the synthesized CloudFormation templates (helpful for debugging)
      - name: Show CDK Output Contents
        run: |
          echo "Listing CDK output folder:"
          ls -la cdk.out

      # Step 10: Upload the CDK output directory as an artifact (so you can view it in GitHub UI or other jobs)
      - name: Upload CDK Output
        uses: actions/upload-artifact@v4
        with:
          name: cdk-out               # Name of the uploaded artifact
          path: cdk.out              # Folder containing the synthesized templates

      # Step 11: Show differences between the deployed stack and the current CDK app (helps preview changes before deploy)
      - name: Diff Against Deployed Stack
        run: cdk diff
